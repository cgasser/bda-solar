# install.package(data.table)
library(data.table)
# install.package(data.table)
library(data.table)
# install.package(xts)
library(xts)
# install.package(ggplot2)
library(ggplot2)
# install.package(plotly)
library(plotly)
# Set the time zone at the system level
Sys.setenv(TZ="Europe/Zurich")
dt <- fread("data/pfadibaar.csv")
View(dt)
View(dt)
# The temporal data in dt is a string! Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
dt$timestampPosix <- as.POSIXct(dt$timestamp,format="%Y-%m-%dT%H:%M:%SZ")
class(dt$timestampPosix)
dt$timestampPosix <- as.POSIXlt(dt$timestamp, format="%Y-%m-%dT%H:%M:%S", origin="1970-01-01",tz="GMT")
# Transform timestamp from character to POSIXct
dt$timestampPosix <- as.POSIXct(dt$timestamp,format="%Y-%m-%dT%H:%M:%SZ", origin="1970-01-01")
class(dt$timestampPosix)
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER
class(dt$cur_yield_watt)
x.xts <- xts(dt$timestampPosix, dt$cur_yield_watt)
x.xts <- xts(dt$cur_yield_watt, dt$timestampPosix)
View(x.xts)
colnames(out.df) <- c("power [W]", "time")
colnames(x.xts) <- c("power [W]", "time")
# Visualize the time series
plot_ly(x.xts )
###colnames(x.xts) <- c("power [W]", "time")
df <- data.frame(matrix(ncol = 2, nrow = 0))
x <- c("time", "power [W]")
colnames(df) <- x
View(df)
View(df)
colnames(df) <- c("time", "power")
df <- as.data.frame.matrix(dt)
colnames(df) <- c("time", "power")
df <- as.data.frame.matrix(dt)
df <- data.frame(dt$timestampPosix, dt$cur_yield_watt)
colnames(df) <- c("time", "power")
# Visualize the time series
plot_ly(data = df)
# Visualize the time series
plot_ly(data = df, x=~time, y=~obs, type = "scatter", mode = 'lines')
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = 'lines')
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter")
# install.package(data.table)
library(data.table)
# install.package(xts)
library(xts)
# install.package(ggplot2)
library(ggplot2)
# install.package(plotly)
library(plotly)
# Set the time zone at the system level
Sys.setenv(TZ="Europe/Zurich")
dt <- fread("data/pfadibaar.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER
class(dt$cur_yield_watt)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$cur_yield_watt)
colnames(df) <- c("time", "power")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = "markers")
# install.package(data.table)
library(data.table)
# install.package(xts)
library(xts)
# install.package(ggplot2)
library(ggplot2)
# install.package(plotly)
library(plotly)
# Set the time zone at the system level
Sys.setenv(TZ="Europe/Zurich")
dt <- fread("data/pfadibaar.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER
class(dt$cur_yield_watt)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$cur_yield_watt)
colnames(df) <- c("time", "power")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = "markers")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = "markers")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = "lines")
dt <- fread("data/birchli")
# install.package(data.table)
library(data.table)
# install.package(xts)
library(xts)
# install.package(ggplot2)
library(ggplot2)
# install.package(plotly)
library(plotly)
# Set the time zone at the system level
Sys.setenv(TZ="Europe/Zurich")
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
View(dt)
View(dt)
dt <- fread("data/pfadibaar.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
dt <- fread("data/pfadibaar.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
View(dt)
View(dt)
dt <- fread("data/pfadibaar.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
View(dt)
View(dt)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER1
class(dt$power1)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1)
colnames(df) <- c("time", "power")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = "markers")
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
colnames(df) <- c("time", "power")
View(df)
View(df)
colnames(df) <- c("time", "power1", "power2")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power1, type = "scatter", mode = "markers")
plot_ly(data = df, x=~time, y=~power2, type = "scatter", mode = "markers")
# install.package(data.table)
library(data.table)
# install.package(xts)
library(xts)
# install.package(ggplot2)
library(ggplot2)
# install.package(plotly)
library(plotly)
# Set the time zone at the system level
Sys.setenv(TZ="Europe/Zurich")
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER1, POWER2
class(dt$power1)
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
colnames(df) <- c("time", "power1", "power2")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power1, type = "scatter", mode = "markers")
plot_ly(data = df, x=~time, y=~power2, type = "scatter", mode = "markers")
largevalue <- df[df$power2 > 3]
largevalue <- df[df$power2 > 3]
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
largevalue <- df[df$power2 > 3]
View(largevalue)
View(largevalue)
View(largevalue)
View(largevalue)
df <- df[df$power2 < 3]
colnames(df) <- c("time", "power1", "power2")
plot_ly(data = df, x=~time, y=~power2, type = "scatter", mode = "markers")
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER1, POWER2
class(dt$power1)
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
colnames(df) <- c("time", "power1", "power2")
df <- df[df$power2 < 3]
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
df <- df[df$power2 < 3]
plot_ly(data = df, x=~time, y=~power2, type = "scatter", mode = "markers")
View(df)
View(df)
df <- df[df$power2 < 3,]
View(df)
View(df)
df2 <- df[df$power2 < 3]
View(df2)
View(df2)
df2 <- df[df$power2==8.754]
View(df2)
View(df2)
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
View(df)
View(df)
df[df$dt.power2==8.754]
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
df[df$df.power2==8.754]
df[df$df.power2==0]
df2 <- df[df$df.power2==0]
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER1, POWER2
class(dt$power1)
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
df2 <- df[df$power2==0]
df2 <- df[df$power2==0,]
df2 <- df[df$power2==0.000,]
View(df2)
View(df2)
View(df2)
View(df2)
df2 <- df[df$power2==8.754,]
View(df)
View(df)
View(df)
View(df)
colnames(df) <- c("time", "power1", "power2")
df2 <- df[df$power2==8.754,]
View(df2)
View(df2)
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER1, POWER2
class(dt$power1)
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
View(df)
View(df)
colnames(df) <- c("time", "power1", "power2")
dfClean <- df[df$power2<3,]
View(dfClean)
View(dfClean)
dfClean <- df[df$power1 < 3 & df$power2 < 3,]
dfClean <- df[df$power1 < 2 & df$power2 < 3,]
dfClean <- df[df$power1 < 1 & df$power2 < 3,]
dfClean <- df[df$power1 < 3 & df$power2 < 3,]
plot_ly(data = dfClean, x=~time, y=~power2, type = "scatter", mode = "markers")
# Visualize the time series
plot_ly(data = dfClean, x=~time, y=~power1, type = "scatter", mode = "markers")
plot_ly(data = dfClean, x=~time, y=~power2, type = "scatter", mode = "markers")
# Visualize the time series
plot_ly(data = dfClean, x=~time, y=~power1, type = "scatter", mode = "markers")
plot_ly(data = dfClean, x=~time, y=~power2, type = "scatter", mode = "markers")
dt <- fread("data/pfadibaar.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER
class(dt$cur_yield_watt)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$cur_yield_watt)
colnames(df) <- c("time", "power")
# Visualize the time series
plot_ly(data = df, x=~time, y=~power, type = "scatter", mode = "markers")
# install.package(data.table)
library(data.table)
# install.package(xts)
library(xts)
# install.package(ggplot2)
library(ggplot2)
# install.package(plotly)
library(plotly)
# Set the time zone at the system level
Sys.setenv(TZ="Europe/Zurich")
dt <- fread("data/birchli.csv")
# attribute TIMESTAMP
# The temporal data in dt is an integer. Check:
class(dt$timestamp)
# Transform timestamp from character to POSIXct
# https://stackoverflow.com/questions/27408131/convert-unix-timestamp-into-datetime-in-r
dt$timestampPosix <- as.POSIXct(as.numeric(as.character(dt$timestamp)), origin='1970-01-01', tz='GMT')
class(dt$timestampPosix)
# attribute POWER1, POWER2
class(dt$power1)
class(dt$power2)
# create a dataframe
df <- data.frame(dt$timestampPosix, dt$power1, dt$power2)
colnames(df) <- c("time", "power1", "power2")
dfClean <- df[df$power1 < 3 & df$power2 < 3,]
# Visualize the time series
plot_ly(data = dfClean, x=~time, y=~power1, type = "scatter", mode = "markers")
